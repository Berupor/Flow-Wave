version: '3.9'
services:

  data-collector:
    build:
      context: .
      dockerfile: data_collector_service/Dockerfile
    env_file: ./.env
    restart: always
    ports:
      - ${GO_DATA_COLLECTOR_PORT}:${GO_DATA_COLLECTOR_PORT}
    depends_on:
      - kafka
      - zookeeper

  data-processing:
    build:
      context: .
      dockerfile: data_processing_service/Dockerfile
    env_file: ./.env
    restart: always
    depends_on:
      - kafka
      - zookeeper
      - mongodb

  etl-service:
    build:
      context: .
      dockerfile: etl_service/Dockerfile
    env_file: ./.env
    restart: always
    depends_on:
      - mongodb
      - cache
      - clickhouse

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    restart: always
    image: confluentinc/cp-zookeeper:7.0.0
    env_file: ./.env
    ports:
      - ${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}
    environment:
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
    healthcheck:
      test: nc -z localhost ${ZOOKEEPER_PORT} || exit -1
      interval: 10s
      timeout: 5s
      retries: 3

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"

  mongodb:
    image: mongo:4.2-rc-bionic
    restart: always
    env_file: ./.env
    hostname: ${MONGO_HOST}
    container_name: mongodb
    expose:
      - ${MONGO_PORT}
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}

  cache:
    container_name: redis_db
    env_file: ./.env
    image: redis:7.0.5-alpine
    hostname: ${REDIS_HOST}
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    restart: always

  clickhouse:
    hostname: ${CLICKHOUSE_HOST}
    env_file: ./.env
    image: yandex/clickhouse-server:21.3.20-alpine
    ports:
      - ${CLICKHOUSE_PORT}
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
